/*
 * Created on 16 Mar 2017 ( Time 18:41:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.storytime.model.StatusCode;
import net.kumasi.storytime.model.jpa.StatusCodeEntity;
import java.util.List;
import net.kumasi.storytime.business.service.mapping.StatusCodeServiceMapper;
import net.kumasi.storytime.persistence.services.jpa.StatusCodePersistenceJPA;
import net.kumasi.storytime.test.StatusCodeFactoryForTest;
import net.kumasi.storytime.test.StatusCodeEntityFactoryForTest;
import net.kumasi.storytime.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StatusCodeService
 */
@RunWith(MockitoJUnitRunner.class)
public class StatusCodeServiceImplTest {

	@InjectMocks
	private StatusCodeServiceImpl statusCodeService;
	@Mock
	private StatusCodePersistenceJPA statusCodePersistenceJPA;
	@Mock
	private StatusCodeServiceMapper statusCodeServiceMapper;
	
	private StatusCodeFactoryForTest statusCodeFactoryForTest = new StatusCodeFactoryForTest();

	private StatusCodeEntityFactoryForTest statusCodeEntityFactoryForTest = new StatusCodeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StatusCodeEntity statusCodeEntity = statusCodePersistenceJPA.load(id);
		
		StatusCode statusCode = statusCodeFactoryForTest.newStatusCode();
		when(statusCodeServiceMapper.mapStatusCodeEntityToStatusCode(statusCodeEntity)).thenReturn(statusCode);

		// When
		StatusCode statusCodeFound = statusCodeService.findById(id);

		// Then
		assertEquals(statusCode.getId(),statusCodeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StatusCodeEntity> statusCodeEntitys = new ArrayList<StatusCodeEntity>();
		StatusCodeEntity statusCodeEntity1 = statusCodeEntityFactoryForTest.newStatusCodeEntity();
		statusCodeEntitys.add(statusCodeEntity1);
		StatusCodeEntity statusCodeEntity2 = statusCodeEntityFactoryForTest.newStatusCodeEntity();
		statusCodeEntitys.add(statusCodeEntity2);
		when(statusCodePersistenceJPA.loadAll()).thenReturn(statusCodeEntitys);
		
		StatusCode statusCode1 = statusCodeFactoryForTest.newStatusCode();
		when(statusCodeServiceMapper.mapStatusCodeEntityToStatusCode(statusCodeEntity1)).thenReturn(statusCode1);
		StatusCode statusCode2 = statusCodeFactoryForTest.newStatusCode();
		when(statusCodeServiceMapper.mapStatusCodeEntityToStatusCode(statusCodeEntity2)).thenReturn(statusCode2);

		// When
		List<StatusCode> statusCodesFounds = statusCodeService.findAll();

		// Then
		assertTrue(statusCode1 == statusCodesFounds.get(0));
		assertTrue(statusCode2 == statusCodesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StatusCode statusCode = statusCodeFactoryForTest.newStatusCode();

		StatusCodeEntity statusCodeEntity = statusCodeEntityFactoryForTest.newStatusCodeEntity();
		when(statusCodePersistenceJPA.load(statusCode.getId())).thenReturn(null);
		
		statusCodeEntity = new StatusCodeEntity();
		statusCodeServiceMapper.mapStatusCodeToStatusCodeEntity(statusCode, statusCodeEntity);
		StatusCodeEntity statusCodeEntitySaved = statusCodePersistenceJPA.save(statusCodeEntity);
		
		StatusCode statusCodeSaved = statusCodeFactoryForTest.newStatusCode();
		when(statusCodeServiceMapper.mapStatusCodeEntityToStatusCode(statusCodeEntitySaved)).thenReturn(statusCodeSaved);

		// When
		StatusCode statusCodeResult = statusCodeService.create(statusCode);

		// Then
		assertTrue(statusCodeResult == statusCodeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StatusCode statusCode = statusCodeFactoryForTest.newStatusCode();

		StatusCodeEntity statusCodeEntity = statusCodeEntityFactoryForTest.newStatusCodeEntity();
		when(statusCodePersistenceJPA.load(statusCode.getId())).thenReturn(statusCodeEntity);

		// When
		Exception exception = null;
		try {
			statusCodeService.create(statusCode);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StatusCode statusCode = statusCodeFactoryForTest.newStatusCode();

		StatusCodeEntity statusCodeEntity = statusCodeEntityFactoryForTest.newStatusCodeEntity();
		when(statusCodePersistenceJPA.load(statusCode.getId())).thenReturn(statusCodeEntity);
		
		StatusCodeEntity statusCodeEntitySaved = statusCodeEntityFactoryForTest.newStatusCodeEntity();
		when(statusCodePersistenceJPA.save(statusCodeEntity)).thenReturn(statusCodeEntitySaved);
		
		StatusCode statusCodeSaved = statusCodeFactoryForTest.newStatusCode();
		when(statusCodeServiceMapper.mapStatusCodeEntityToStatusCode(statusCodeEntitySaved)).thenReturn(statusCodeSaved);

		// When
		StatusCode statusCodeResult = statusCodeService.update(statusCode);

		// Then
		verify(statusCodeServiceMapper).mapStatusCodeToStatusCodeEntity(statusCode, statusCodeEntity);
		assertTrue(statusCodeResult == statusCodeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		statusCodeService.delete(id);

		// Then
		verify(statusCodePersistenceJPA).delete(id);
		
	}

}
