/*
 * Created on 16 Mar 2017 ( Time 18:41:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import net.kumasi.storytime.model.Comment;
import net.kumasi.storytime.model.jpa.CommentEntity;
import net.kumasi.storytime.model.jpa.RequirementEntity;
import net.kumasi.storytime.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class CommentServiceMapperTest {

	private CommentServiceMapper commentServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		commentServiceMapper = new CommentServiceMapper();
		commentServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'CommentEntity' to 'Comment'
	 * @param commentEntity
	 */
	@Test
	public void testMapCommentEntityToComment() {
		// Given
		CommentEntity commentEntity = new CommentEntity();
		commentEntity.setDescription(mockValues.nextString(16777215));
		commentEntity.setRequirement(new RequirementEntity());
		commentEntity.getRequirement().setIdrequirement(mockValues.nextInteger());
		
		// When
		Comment comment = commentServiceMapper.mapCommentEntityToComment(commentEntity);
		
		// Then
		assertEquals(commentEntity.getDescription(), comment.getDescription());
		assertEquals(commentEntity.getRequirement().getIdrequirement(), comment.getRequirementIdrequirement());
	}
	
	/**
	 * Test : Mapping from 'Comment' to 'CommentEntity'
	 */
	@Test
	public void testMapCommentToCommentEntity() {
		// Given
		Comment comment = new Comment();
		comment.setDescription(mockValues.nextString(16777215));
		comment.setRequirementIdrequirement(mockValues.nextInteger());

		CommentEntity commentEntity = new CommentEntity();
		
		// When
		commentServiceMapper.mapCommentToCommentEntity(comment, commentEntity);
		
		// Then
		assertEquals(comment.getDescription(), commentEntity.getDescription());
		assertEquals(comment.getRequirementIdrequirement(), commentEntity.getRequirement().getIdrequirement());
	}

}