/*
 * Created on 16 Mar 2017 ( Time 18:41:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.storytime.model.SpecificationType;
import net.kumasi.storytime.model.jpa.SpecificationTypeEntity;
import java.util.List;
import net.kumasi.storytime.business.service.mapping.SpecificationTypeServiceMapper;
import net.kumasi.storytime.persistence.services.jpa.SpecificationTypePersistenceJPA;
import net.kumasi.storytime.test.SpecificationTypeFactoryForTest;
import net.kumasi.storytime.test.SpecificationTypeEntityFactoryForTest;
import net.kumasi.storytime.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SpecificationTypeService
 */
@RunWith(MockitoJUnitRunner.class)
public class SpecificationTypeServiceImplTest {

	@InjectMocks
	private SpecificationTypeServiceImpl specificationTypeService;
	@Mock
	private SpecificationTypePersistenceJPA specificationTypePersistenceJPA;
	@Mock
	private SpecificationTypeServiceMapper specificationTypeServiceMapper;
	
	private SpecificationTypeFactoryForTest specificationTypeFactoryForTest = new SpecificationTypeFactoryForTest();

	private SpecificationTypeEntityFactoryForTest specificationTypeEntityFactoryForTest = new SpecificationTypeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idrequirementType = mockValues.nextInteger();
		
		SpecificationTypeEntity specificationTypeEntity = specificationTypePersistenceJPA.load(idrequirementType);
		
		SpecificationType specificationType = specificationTypeFactoryForTest.newSpecificationType();
		when(specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(specificationTypeEntity)).thenReturn(specificationType);

		// When
		SpecificationType specificationTypeFound = specificationTypeService.findById(idrequirementType);

		// Then
		assertEquals(specificationType.getIdrequirementType(),specificationTypeFound.getIdrequirementType());
	}

	@Test
	public void findAll() {
		// Given
		List<SpecificationTypeEntity> specificationTypeEntitys = new ArrayList<SpecificationTypeEntity>();
		SpecificationTypeEntity specificationTypeEntity1 = specificationTypeEntityFactoryForTest.newSpecificationTypeEntity();
		specificationTypeEntitys.add(specificationTypeEntity1);
		SpecificationTypeEntity specificationTypeEntity2 = specificationTypeEntityFactoryForTest.newSpecificationTypeEntity();
		specificationTypeEntitys.add(specificationTypeEntity2);
		when(specificationTypePersistenceJPA.loadAll()).thenReturn(specificationTypeEntitys);
		
		SpecificationType specificationType1 = specificationTypeFactoryForTest.newSpecificationType();
		when(specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(specificationTypeEntity1)).thenReturn(specificationType1);
		SpecificationType specificationType2 = specificationTypeFactoryForTest.newSpecificationType();
		when(specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(specificationTypeEntity2)).thenReturn(specificationType2);

		// When
		List<SpecificationType> specificationTypesFounds = specificationTypeService.findAll();

		// Then
		assertTrue(specificationType1 == specificationTypesFounds.get(0));
		assertTrue(specificationType2 == specificationTypesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		SpecificationType specificationType = specificationTypeFactoryForTest.newSpecificationType();

		SpecificationTypeEntity specificationTypeEntity = specificationTypeEntityFactoryForTest.newSpecificationTypeEntity();
		when(specificationTypePersistenceJPA.load(specificationType.getIdrequirementType())).thenReturn(null);
		
		specificationTypeEntity = new SpecificationTypeEntity();
		specificationTypeServiceMapper.mapSpecificationTypeToSpecificationTypeEntity(specificationType, specificationTypeEntity);
		SpecificationTypeEntity specificationTypeEntitySaved = specificationTypePersistenceJPA.save(specificationTypeEntity);
		
		SpecificationType specificationTypeSaved = specificationTypeFactoryForTest.newSpecificationType();
		when(specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(specificationTypeEntitySaved)).thenReturn(specificationTypeSaved);

		// When
		SpecificationType specificationTypeResult = specificationTypeService.create(specificationType);

		// Then
		assertTrue(specificationTypeResult == specificationTypeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		SpecificationType specificationType = specificationTypeFactoryForTest.newSpecificationType();

		SpecificationTypeEntity specificationTypeEntity = specificationTypeEntityFactoryForTest.newSpecificationTypeEntity();
		when(specificationTypePersistenceJPA.load(specificationType.getIdrequirementType())).thenReturn(specificationTypeEntity);

		// When
		Exception exception = null;
		try {
			specificationTypeService.create(specificationType);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		SpecificationType specificationType = specificationTypeFactoryForTest.newSpecificationType();

		SpecificationTypeEntity specificationTypeEntity = specificationTypeEntityFactoryForTest.newSpecificationTypeEntity();
		when(specificationTypePersistenceJPA.load(specificationType.getIdrequirementType())).thenReturn(specificationTypeEntity);
		
		SpecificationTypeEntity specificationTypeEntitySaved = specificationTypeEntityFactoryForTest.newSpecificationTypeEntity();
		when(specificationTypePersistenceJPA.save(specificationTypeEntity)).thenReturn(specificationTypeEntitySaved);
		
		SpecificationType specificationTypeSaved = specificationTypeFactoryForTest.newSpecificationType();
		when(specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(specificationTypeEntitySaved)).thenReturn(specificationTypeSaved);

		// When
		SpecificationType specificationTypeResult = specificationTypeService.update(specificationType);

		// Then
		verify(specificationTypeServiceMapper).mapSpecificationTypeToSpecificationTypeEntity(specificationType, specificationTypeEntity);
		assertTrue(specificationTypeResult == specificationTypeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idrequirementType = mockValues.nextInteger();

		// When
		specificationTypeService.delete(idrequirementType);

		// Then
		verify(specificationTypePersistenceJPA).delete(idrequirementType);
		
	}

}
