/*
 * Created on 16 Mar 2017 ( Time 18:41:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.storytime.model.Person;
import net.kumasi.storytime.model.jpa.PersonEntity;
import java.util.List;
import net.kumasi.storytime.business.service.mapping.PersonServiceMapper;
import net.kumasi.storytime.persistence.services.jpa.PersonPersistenceJPA;
import net.kumasi.storytime.test.PersonFactoryForTest;
import net.kumasi.storytime.test.PersonEntityFactoryForTest;
import net.kumasi.storytime.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PersonService
 */
@RunWith(MockitoJUnitRunner.class)
public class PersonServiceImplTest {

	@InjectMocks
	private PersonServiceImpl personService;
	@Mock
	private PersonPersistenceJPA personPersistenceJPA;
	@Mock
	private PersonServiceMapper personServiceMapper;
	
	private PersonFactoryForTest personFactoryForTest = new PersonFactoryForTest();

	private PersonEntityFactoryForTest personEntityFactoryForTest = new PersonEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idperson = mockValues.nextInteger();
		
		PersonEntity personEntity = personPersistenceJPA.load(idperson);
		
		Person person = personFactoryForTest.newPerson();
		when(personServiceMapper.mapPersonEntityToPerson(personEntity)).thenReturn(person);

		// When
		Person personFound = personService.findById(idperson);

		// Then
		assertEquals(person.getIdperson(),personFound.getIdperson());
	}

	@Test
	public void findAll() {
		// Given
		List<PersonEntity> personEntitys = new ArrayList<PersonEntity>();
		PersonEntity personEntity1 = personEntityFactoryForTest.newPersonEntity();
		personEntitys.add(personEntity1);
		PersonEntity personEntity2 = personEntityFactoryForTest.newPersonEntity();
		personEntitys.add(personEntity2);
		when(personPersistenceJPA.loadAll()).thenReturn(personEntitys);
		
		Person person1 = personFactoryForTest.newPerson();
		when(personServiceMapper.mapPersonEntityToPerson(personEntity1)).thenReturn(person1);
		Person person2 = personFactoryForTest.newPerson();
		when(personServiceMapper.mapPersonEntityToPerson(personEntity2)).thenReturn(person2);

		// When
		List<Person> personsFounds = personService.findAll();

		// Then
		assertTrue(person1 == personsFounds.get(0));
		assertTrue(person2 == personsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Person person = personFactoryForTest.newPerson();

		PersonEntity personEntity = personEntityFactoryForTest.newPersonEntity();
		when(personPersistenceJPA.load(person.getIdperson())).thenReturn(null);
		
		personEntity = new PersonEntity();
		personServiceMapper.mapPersonToPersonEntity(person, personEntity);
		PersonEntity personEntitySaved = personPersistenceJPA.save(personEntity);
		
		Person personSaved = personFactoryForTest.newPerson();
		when(personServiceMapper.mapPersonEntityToPerson(personEntitySaved)).thenReturn(personSaved);

		// When
		Person personResult = personService.create(person);

		// Then
		assertTrue(personResult == personSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Person person = personFactoryForTest.newPerson();

		PersonEntity personEntity = personEntityFactoryForTest.newPersonEntity();
		when(personPersistenceJPA.load(person.getIdperson())).thenReturn(personEntity);

		// When
		Exception exception = null;
		try {
			personService.create(person);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Person person = personFactoryForTest.newPerson();

		PersonEntity personEntity = personEntityFactoryForTest.newPersonEntity();
		when(personPersistenceJPA.load(person.getIdperson())).thenReturn(personEntity);
		
		PersonEntity personEntitySaved = personEntityFactoryForTest.newPersonEntity();
		when(personPersistenceJPA.save(personEntity)).thenReturn(personEntitySaved);
		
		Person personSaved = personFactoryForTest.newPerson();
		when(personServiceMapper.mapPersonEntityToPerson(personEntitySaved)).thenReturn(personSaved);

		// When
		Person personResult = personService.update(person);

		// Then
		verify(personServiceMapper).mapPersonToPersonEntity(person, personEntity);
		assertTrue(personResult == personSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idperson = mockValues.nextInteger();

		// When
		personService.delete(idperson);

		// Then
		verify(personPersistenceJPA).delete(idperson);
		
	}

}
