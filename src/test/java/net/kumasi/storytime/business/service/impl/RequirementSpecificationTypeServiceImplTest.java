/*
 * Created on 16 Mar 2017 ( Time 18:41:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.storytime.model.RequirementSpecificationType;
import net.kumasi.storytime.model.jpa.RequirementSpecificationTypeEntity;
import net.kumasi.storytime.model.jpa.RequirementSpecificationTypeEntityKey;
import net.kumasi.storytime.business.service.mapping.RequirementSpecificationTypeServiceMapper;
import net.kumasi.storytime.persistence.services.jpa.RequirementSpecificationTypePersistenceJPA;
import net.kumasi.storytime.test.RequirementSpecificationTypeFactoryForTest;
import net.kumasi.storytime.test.RequirementSpecificationTypeEntityFactoryForTest;
import net.kumasi.storytime.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of RequirementSpecificationTypeService
 */
@RunWith(MockitoJUnitRunner.class)
public class RequirementSpecificationTypeServiceImplTest {

	@InjectMocks
	private RequirementSpecificationTypeServiceImpl requirementSpecificationTypeService;
	@Mock
	private RequirementSpecificationTypePersistenceJPA requirementSpecificationTypePersistenceJPA;
	@Mock
	private RequirementSpecificationTypeServiceMapper requirementSpecificationTypeServiceMapper;
	
	private RequirementSpecificationTypeFactoryForTest requirementSpecificationTypeFactoryForTest = new RequirementSpecificationTypeFactoryForTest();

	private RequirementSpecificationTypeEntityFactoryForTest requirementSpecificationTypeEntityFactoryForTest = new RequirementSpecificationTypeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer requirementIdrequirement = mockValues.nextInteger();
		Integer specificationTypeIdrequirementType = mockValues.nextInteger();
		
		RequirementSpecificationTypeEntityKey requirementSpecificationTypeEntityKey = new RequirementSpecificationTypeEntityKey(requirementIdrequirement, specificationTypeIdrequirementType);
		requirementSpecificationTypeEntityKey.setRequirementIdrequirement(requirementIdrequirement);
		requirementSpecificationTypeEntityKey.setSpecificationTypeIdrequirementType(specificationTypeIdrequirementType);
		
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntity = requirementSpecificationTypePersistenceJPA.load(requirementSpecificationTypeEntityKey);
		
		RequirementSpecificationType requirementSpecificationType = requirementSpecificationTypeFactoryForTest.newRequirementSpecificationType();
		when(requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(requirementSpecificationTypeEntity)).thenReturn(requirementSpecificationType);

		// When
		RequirementSpecificationType requirementSpecificationTypeFound = requirementSpecificationTypeService.findById(requirementIdrequirement, specificationTypeIdrequirementType);

		// Then
		assertEquals(requirementSpecificationType.getRequirementIdrequirement(),requirementSpecificationTypeFound.getRequirementIdrequirement());
		assertEquals(requirementSpecificationType.getSpecificationTypeIdrequirementType(),requirementSpecificationTypeFound.getSpecificationTypeIdrequirementType());
	}

	@Test
	public void findAll() {
		// Given
		List<RequirementSpecificationTypeEntity> requirementSpecificationTypeEntitys = new ArrayList<RequirementSpecificationTypeEntity>();
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntity1 = requirementSpecificationTypeEntityFactoryForTest.newRequirementSpecificationTypeEntity();
		requirementSpecificationTypeEntitys.add(requirementSpecificationTypeEntity1);
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntity2 = requirementSpecificationTypeEntityFactoryForTest.newRequirementSpecificationTypeEntity();
		requirementSpecificationTypeEntitys.add(requirementSpecificationTypeEntity2);
		when(requirementSpecificationTypePersistenceJPA.loadAll()).thenReturn(requirementSpecificationTypeEntitys);
		
		RequirementSpecificationType requirementSpecificationType1 = requirementSpecificationTypeFactoryForTest.newRequirementSpecificationType();
		when(requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(requirementSpecificationTypeEntity1)).thenReturn(requirementSpecificationType1);
		RequirementSpecificationType requirementSpecificationType2 = requirementSpecificationTypeFactoryForTest.newRequirementSpecificationType();
		when(requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(requirementSpecificationTypeEntity2)).thenReturn(requirementSpecificationType2);

		// When
		List<RequirementSpecificationType> requirementSpecificationTypesFounds = requirementSpecificationTypeService.findAll();

		// Then
		assertTrue(requirementSpecificationType1 == requirementSpecificationTypesFounds.get(0));
		assertTrue(requirementSpecificationType2 == requirementSpecificationTypesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		RequirementSpecificationType requirementSpecificationType = requirementSpecificationTypeFactoryForTest.newRequirementSpecificationType();

		RequirementSpecificationTypeEntity requirementSpecificationTypeEntity = requirementSpecificationTypeEntityFactoryForTest.newRequirementSpecificationTypeEntity();
		when(requirementSpecificationTypePersistenceJPA.load(requirementSpecificationType.getRequirementIdrequirement(), requirementSpecificationType.getSpecificationTypeIdrequirementType())).thenReturn(null);
		
		requirementSpecificationTypeEntity = new RequirementSpecificationTypeEntity();
		requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeToRequirementSpecificationTypeEntity(requirementSpecificationType, requirementSpecificationTypeEntity);
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntitySaved = requirementSpecificationTypePersistenceJPA.save(requirementSpecificationTypeEntity);
		
		RequirementSpecificationType requirementSpecificationTypeSaved = requirementSpecificationTypeFactoryForTest.newRequirementSpecificationType();
		when(requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(requirementSpecificationTypeEntitySaved)).thenReturn(requirementSpecificationTypeSaved);

		// When
		RequirementSpecificationType requirementSpecificationTypeResult = requirementSpecificationTypeService.create(requirementSpecificationType);

		// Then
		assertTrue(requirementSpecificationTypeResult == requirementSpecificationTypeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		RequirementSpecificationType requirementSpecificationType = requirementSpecificationTypeFactoryForTest.newRequirementSpecificationType();

		RequirementSpecificationTypeEntity requirementSpecificationTypeEntity = requirementSpecificationTypeEntityFactoryForTest.newRequirementSpecificationTypeEntity();
		when(requirementSpecificationTypePersistenceJPA.load(requirementSpecificationType.getRequirementIdrequirement(), requirementSpecificationType.getSpecificationTypeIdrequirementType())).thenReturn(requirementSpecificationTypeEntity);

		// When
		Exception exception = null;
		try {
			requirementSpecificationTypeService.create(requirementSpecificationType);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		RequirementSpecificationType requirementSpecificationType = requirementSpecificationTypeFactoryForTest.newRequirementSpecificationType();

		RequirementSpecificationTypeEntity requirementSpecificationTypeEntity = requirementSpecificationTypeEntityFactoryForTest.newRequirementSpecificationTypeEntity();
		when(requirementSpecificationTypePersistenceJPA.load(requirementSpecificationType.getRequirementIdrequirement(), requirementSpecificationType.getSpecificationTypeIdrequirementType())).thenReturn(requirementSpecificationTypeEntity);
		
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntitySaved = requirementSpecificationTypeEntityFactoryForTest.newRequirementSpecificationTypeEntity();
		when(requirementSpecificationTypePersistenceJPA.save(requirementSpecificationTypeEntity)).thenReturn(requirementSpecificationTypeEntitySaved);
		
		RequirementSpecificationType requirementSpecificationTypeSaved = requirementSpecificationTypeFactoryForTest.newRequirementSpecificationType();
		when(requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(requirementSpecificationTypeEntitySaved)).thenReturn(requirementSpecificationTypeSaved);

		// When
		RequirementSpecificationType requirementSpecificationTypeResult = requirementSpecificationTypeService.update(requirementSpecificationType);

		// Then
		verify(requirementSpecificationTypeServiceMapper).mapRequirementSpecificationTypeToRequirementSpecificationTypeEntity(requirementSpecificationType, requirementSpecificationTypeEntity);
		assertTrue(requirementSpecificationTypeResult == requirementSpecificationTypeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer requirementIdrequirement = mockValues.nextInteger();
		Integer specificationTypeIdrequirementType = mockValues.nextInteger();

		// When
		requirementSpecificationTypeService.delete(requirementIdrequirement, specificationTypeIdrequirementType);

		// Then
		verify(requirementSpecificationTypePersistenceJPA).delete(requirementIdrequirement, specificationTypeIdrequirementType);
		
	}

}
