/*
 * Created on 16 Mar 2017 ( Time 18:41:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import net.kumasi.storytime.model.Requirement;
import net.kumasi.storytime.model.jpa.RequirementEntity;
import java.util.Date;
import java.util.List;
import net.kumasi.storytime.business.service.mapping.RequirementServiceMapper;
import net.kumasi.storytime.persistence.services.jpa.RequirementPersistenceJPA;
import net.kumasi.storytime.test.RequirementFactoryForTest;
import net.kumasi.storytime.test.RequirementEntityFactoryForTest;
import net.kumasi.storytime.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of RequirementService
 */
@RunWith(MockitoJUnitRunner.class)
public class RequirementServiceImplTest {

	@InjectMocks
	private RequirementServiceImpl requirementService;
	@Mock
	private RequirementPersistenceJPA requirementPersistenceJPA;
	@Mock
	private RequirementServiceMapper requirementServiceMapper;
	
	private RequirementFactoryForTest requirementFactoryForTest = new RequirementFactoryForTest();

	private RequirementEntityFactoryForTest requirementEntityFactoryForTest = new RequirementEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idrequirement = mockValues.nextInteger();
		
		RequirementEntity requirementEntity = requirementPersistenceJPA.load(idrequirement);
		
		Requirement requirement = requirementFactoryForTest.newRequirement();
		when(requirementServiceMapper.mapRequirementEntityToRequirement(requirementEntity)).thenReturn(requirement);

		// When
		Requirement requirementFound = requirementService.findById(idrequirement);

		// Then
		assertEquals(requirement.getIdrequirement(),requirementFound.getIdrequirement());
	}

	@Test
	public void findAll() {
		// Given
		List<RequirementEntity> requirementEntitys = new ArrayList<RequirementEntity>();
		RequirementEntity requirementEntity1 = requirementEntityFactoryForTest.newRequirementEntity();
		requirementEntitys.add(requirementEntity1);
		RequirementEntity requirementEntity2 = requirementEntityFactoryForTest.newRequirementEntity();
		requirementEntitys.add(requirementEntity2);
		when(requirementPersistenceJPA.loadAll()).thenReturn(requirementEntitys);
		
		Requirement requirement1 = requirementFactoryForTest.newRequirement();
		when(requirementServiceMapper.mapRequirementEntityToRequirement(requirementEntity1)).thenReturn(requirement1);
		Requirement requirement2 = requirementFactoryForTest.newRequirement();
		when(requirementServiceMapper.mapRequirementEntityToRequirement(requirementEntity2)).thenReturn(requirement2);

		// When
		List<Requirement> requirementsFounds = requirementService.findAll();

		// Then
		assertTrue(requirement1 == requirementsFounds.get(0));
		assertTrue(requirement2 == requirementsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Requirement requirement = requirementFactoryForTest.newRequirement();

		RequirementEntity requirementEntity = requirementEntityFactoryForTest.newRequirementEntity();
		when(requirementPersistenceJPA.load(requirement.getIdrequirement())).thenReturn(null);
		
		requirementEntity = new RequirementEntity();
		requirementServiceMapper.mapRequirementToRequirementEntity(requirement, requirementEntity);
		RequirementEntity requirementEntitySaved = requirementPersistenceJPA.save(requirementEntity);
		
		Requirement requirementSaved = requirementFactoryForTest.newRequirement();
		when(requirementServiceMapper.mapRequirementEntityToRequirement(requirementEntitySaved)).thenReturn(requirementSaved);

		// When
		Requirement requirementResult = requirementService.create(requirement);

		// Then
		assertTrue(requirementResult == requirementSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Requirement requirement = requirementFactoryForTest.newRequirement();

		RequirementEntity requirementEntity = requirementEntityFactoryForTest.newRequirementEntity();
		when(requirementPersistenceJPA.load(requirement.getIdrequirement())).thenReturn(requirementEntity);

		// When
		Exception exception = null;
		try {
			requirementService.create(requirement);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Requirement requirement = requirementFactoryForTest.newRequirement();

		RequirementEntity requirementEntity = requirementEntityFactoryForTest.newRequirementEntity();
		when(requirementPersistenceJPA.load(requirement.getIdrequirement())).thenReturn(requirementEntity);
		
		RequirementEntity requirementEntitySaved = requirementEntityFactoryForTest.newRequirementEntity();
		when(requirementPersistenceJPA.save(requirementEntity)).thenReturn(requirementEntitySaved);
		
		Requirement requirementSaved = requirementFactoryForTest.newRequirement();
		when(requirementServiceMapper.mapRequirementEntityToRequirement(requirementEntitySaved)).thenReturn(requirementSaved);

		// When
		Requirement requirementResult = requirementService.update(requirement);

		// Then
		verify(requirementServiceMapper).mapRequirementToRequirementEntity(requirement, requirementEntity);
		assertTrue(requirementResult == requirementSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idrequirement = mockValues.nextInteger();

		// When
		requirementService.delete(idrequirement);

		// Then
		verify(requirementPersistenceJPA).delete(idrequirement);
		
	}

}
