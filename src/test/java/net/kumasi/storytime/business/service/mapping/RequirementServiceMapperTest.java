/*
 * Created on 16 Mar 2017 ( Time 18:41:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import net.kumasi.storytime.model.Requirement;
import net.kumasi.storytime.model.jpa.RequirementEntity;
import net.kumasi.storytime.model.jpa.StatusCodeEntity;
import net.kumasi.storytime.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class RequirementServiceMapperTest {

	private RequirementServiceMapper requirementServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		requirementServiceMapper = new RequirementServiceMapper();
		requirementServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'RequirementEntity' to 'Requirement'
	 * @param requirementEntity
	 */
	@Test
	public void testMapRequirementEntityToRequirement() {
		// Given
		RequirementEntity requirementEntity = new RequirementEntity();
		requirementEntity.setTitle(mockValues.nextString(75));
		requirementEntity.setDescription(mockValues.nextString(16777215));
		requirementEntity.setAcceptanceCriteria(mockValues.nextString(16777215));
		requirementEntity.setCreatedOn(mockValues.nextDate());
		requirementEntity.setCreatedBy(mockValues.nextInteger());
		requirementEntity.setStartDate(mockValues.nextDate());
		requirementEntity.setEndDate(mockValues.nextDate());
		requirementEntity.setStatus(mockValues.nextInteger());
		requirementEntity.setPriority(mockValues.nextInteger());
		requirementEntity.setStatusCode(new StatusCodeEntity());
		requirementEntity.getStatusCode().setId(mockValues.nextInteger());
		
		// When
		Requirement requirement = requirementServiceMapper.mapRequirementEntityToRequirement(requirementEntity);
		
		// Then
		assertEquals(requirementEntity.getTitle(), requirement.getTitle());
		assertEquals(requirementEntity.getDescription(), requirement.getDescription());
		assertEquals(requirementEntity.getAcceptanceCriteria(), requirement.getAcceptanceCriteria());
		assertEquals(requirementEntity.getCreatedOn(), requirement.getCreatedOn());
		assertEquals(requirementEntity.getCreatedBy(), requirement.getCreatedBy());
		assertEquals(requirementEntity.getStartDate(), requirement.getStartDate());
		assertEquals(requirementEntity.getEndDate(), requirement.getEndDate());
		assertEquals(requirementEntity.getStatus(), requirement.getStatus());
		assertEquals(requirementEntity.getPriority(), requirement.getPriority());
		assertEquals(requirementEntity.getStatusCode().getId(), requirement.getStatusCodeId());
	}
	
	/**
	 * Test : Mapping from 'Requirement' to 'RequirementEntity'
	 */
	@Test
	public void testMapRequirementToRequirementEntity() {
		// Given
		Requirement requirement = new Requirement();
		requirement.setTitle(mockValues.nextString(75));
		requirement.setDescription(mockValues.nextString(16777215));
		requirement.setAcceptanceCriteria(mockValues.nextString(16777215));
		requirement.setCreatedOn(mockValues.nextDate());
		requirement.setCreatedBy(mockValues.nextInteger());
		requirement.setStartDate(mockValues.nextDate());
		requirement.setEndDate(mockValues.nextDate());
		requirement.setStatus(mockValues.nextInteger());
		requirement.setPriority(mockValues.nextInteger());
		requirement.setStatusCodeId(mockValues.nextInteger());

		RequirementEntity requirementEntity = new RequirementEntity();
		
		// When
		requirementServiceMapper.mapRequirementToRequirementEntity(requirement, requirementEntity);
		
		// Then
		assertEquals(requirement.getTitle(), requirementEntity.getTitle());
		assertEquals(requirement.getDescription(), requirementEntity.getDescription());
		assertEquals(requirement.getAcceptanceCriteria(), requirementEntity.getAcceptanceCriteria());
		assertEquals(requirement.getCreatedOn(), requirementEntity.getCreatedOn());
		assertEquals(requirement.getCreatedBy(), requirementEntity.getCreatedBy());
		assertEquals(requirement.getStartDate(), requirementEntity.getStartDate());
		assertEquals(requirement.getEndDate(), requirementEntity.getEndDate());
		assertEquals(requirement.getStatus(), requirementEntity.getStatus());
		assertEquals(requirement.getPriority(), requirementEntity.getPriority());
		assertEquals(requirement.getStatusCodeId(), requirementEntity.getStatusCode().getId());
	}

}