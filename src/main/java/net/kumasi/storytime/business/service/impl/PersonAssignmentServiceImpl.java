/*
 * Created on 16 Mar 2017 ( Time 18:41:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.kumasi.storytime.model.PersonAssignment;
import net.kumasi.storytime.model.jpa.PersonAssignmentEntity;
import net.kumasi.storytime.model.jpa.PersonAssignmentEntityKey;
import net.kumasi.storytime.business.service.PersonAssignmentService;
import net.kumasi.storytime.business.service.mapping.PersonAssignmentServiceMapper;
import net.kumasi.storytime.persistence.PersistenceServiceProvider;
import net.kumasi.storytime.persistence.services.PersonAssignmentPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of PersonAssignmentService
 */
@Component
public class PersonAssignmentServiceImpl implements PersonAssignmentService {

	private PersonAssignmentPersistence personAssignmentPersistence;

	@Resource
	private PersonAssignmentServiceMapper personAssignmentServiceMapper;
	
	public PersonAssignmentServiceImpl() {
		personAssignmentPersistence = PersistenceServiceProvider.getService(PersonAssignmentPersistence.class);
	}
		
	@Override
	public PersonAssignment findById(Integer personIdperson, Integer requirementIdrequirement) {
		PersonAssignmentEntity entity = personAssignmentPersistence.load(personIdperson, requirementIdrequirement);
		return personAssignmentServiceMapper.mapPersonAssignmentEntityToPersonAssignment(entity);
	}

	@Override
	public List<PersonAssignment> findAll() {
		List<PersonAssignmentEntity> entities = personAssignmentPersistence.loadAll();
		List<PersonAssignment> beans = new ArrayList<PersonAssignment>();
		for(PersonAssignmentEntity entity : entities) {
			beans.add(personAssignmentServiceMapper.mapPersonAssignmentEntityToPersonAssignment(entity));
		}
		return beans;
	}

	@Override
	public PersonAssignment save(PersonAssignment personAssignment) {
		return update(personAssignment) ;
	}

	@Override
	public PersonAssignment create(PersonAssignment personAssignment) {
		if(personAssignmentPersistence.load(personAssignment.getPersonIdperson(), personAssignment.getRequirementIdrequirement()) != null) {
			throw new IllegalStateException("already.exists");
		}
		PersonAssignmentEntity personAssignmentEntity = new PersonAssignmentEntity();
		personAssignmentServiceMapper.mapPersonAssignmentToPersonAssignmentEntity(personAssignment, personAssignmentEntity);
		PersonAssignmentEntity personAssignmentEntitySaved = personAssignmentPersistence.save(personAssignmentEntity);
		return personAssignmentServiceMapper.mapPersonAssignmentEntityToPersonAssignment(personAssignmentEntitySaved);
	}

	@Override
	public PersonAssignment update(PersonAssignment personAssignment) {
		PersonAssignmentEntity personAssignmentEntity = personAssignmentPersistence.load(personAssignment.getPersonIdperson(), personAssignment.getRequirementIdrequirement());
		personAssignmentServiceMapper.mapPersonAssignmentToPersonAssignmentEntity(personAssignment, personAssignmentEntity);
		PersonAssignmentEntity personAssignmentEntitySaved = personAssignmentPersistence.save(personAssignmentEntity);
		return personAssignmentServiceMapper.mapPersonAssignmentEntityToPersonAssignment(personAssignmentEntitySaved);
	}

	@Override
	public void delete(Integer personIdperson, Integer requirementIdrequirement) {
		personAssignmentPersistence.delete(personIdperson, requirementIdrequirement);
	}

	public PersonAssignmentPersistence getPersonAssignmentPersistence() {
		return personAssignmentPersistence;
	}

	public void setPersonAssignmentPersistence(PersonAssignmentPersistence personAssignmentPersistence) {
		this.personAssignmentPersistence = personAssignmentPersistence;
	}

	public PersonAssignmentServiceMapper getPersonAssignmentServiceMapper() {
		return personAssignmentServiceMapper;
	}

	public void setPersonAssignmentServiceMapper(PersonAssignmentServiceMapper personAssignmentServiceMapper) {
		this.personAssignmentServiceMapper = personAssignmentServiceMapper;
	}

}
