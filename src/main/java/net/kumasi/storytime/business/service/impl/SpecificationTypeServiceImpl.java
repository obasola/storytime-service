/*
 * Created on 16 Mar 2017 ( Time 18:41:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.kumasi.storytime.model.SpecificationType;
import net.kumasi.storytime.model.jpa.SpecificationTypeEntity;
import java.util.List;
import net.kumasi.storytime.business.service.SpecificationTypeService;
import net.kumasi.storytime.business.service.mapping.SpecificationTypeServiceMapper;
import net.kumasi.storytime.persistence.PersistenceServiceProvider;
import net.kumasi.storytime.persistence.services.SpecificationTypePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of SpecificationTypeService
 */
@Component
public class SpecificationTypeServiceImpl implements SpecificationTypeService {

	private SpecificationTypePersistence specificationTypePersistence;

	@Resource
	private SpecificationTypeServiceMapper specificationTypeServiceMapper;
	
	public SpecificationTypeServiceImpl() {
		specificationTypePersistence = PersistenceServiceProvider.getService(SpecificationTypePersistence.class);
	}
		
	@Override
	public SpecificationType findById(Integer idrequirementType) {
		SpecificationTypeEntity entity = specificationTypePersistence.load(idrequirementType);
		return specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(entity);
	}

	@Override
	public List<SpecificationType> findAll() {
		List<SpecificationTypeEntity> entities = specificationTypePersistence.loadAll();
		List<SpecificationType> beans = new ArrayList<SpecificationType>();
		for(SpecificationTypeEntity entity : entities) {
			beans.add(specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(entity));
		}
		return beans;
	}

	@Override 
	public SpecificationType save(SpecificationType specificationType) {
		return update(specificationType) ;
	}

	@Override
	public SpecificationType create(SpecificationType specificationType) {
		if(specificationType.getIdrequirementType() != null && specificationTypePersistence.load(specificationType.getIdrequirementType()) != null) {
			throw new IllegalStateException("already.exists");
		}
		SpecificationTypeEntity specificationTypeEntity = new SpecificationTypeEntity();
		specificationTypeServiceMapper.mapSpecificationTypeToSpecificationTypeEntity(specificationType, specificationTypeEntity);
		SpecificationTypeEntity specificationTypeEntitySaved = specificationTypePersistence.save(specificationTypeEntity);
		return specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(specificationTypeEntitySaved);
	}

	@Override
	public SpecificationType update(SpecificationType specificationType) {
		SpecificationTypeEntity specificationTypeEntity = specificationTypePersistence.load(specificationType.getIdrequirementType());
		specificationTypeServiceMapper.mapSpecificationTypeToSpecificationTypeEntity(specificationType, specificationTypeEntity);
		SpecificationTypeEntity specificationTypeEntitySaved = specificationTypePersistence.save(specificationTypeEntity);
		return specificationTypeServiceMapper.mapSpecificationTypeEntityToSpecificationType(specificationTypeEntitySaved);
	}

	@Override
	public void delete(Integer idrequirementType) {
		specificationTypePersistence.delete(idrequirementType);
	}

	public SpecificationTypePersistence getSpecificationTypePersistence() {
		return specificationTypePersistence;
	}

	public void setSpecificationTypePersistence(SpecificationTypePersistence specificationTypePersistence) {
		this.specificationTypePersistence = specificationTypePersistence;
	}

	public SpecificationTypeServiceMapper getSpecificationTypeServiceMapper() {
		return specificationTypeServiceMapper;
	}

	public void setSpecificationTypeServiceMapper(SpecificationTypeServiceMapper specificationTypeServiceMapper) {
		this.specificationTypeServiceMapper = specificationTypeServiceMapper;
	}

}
