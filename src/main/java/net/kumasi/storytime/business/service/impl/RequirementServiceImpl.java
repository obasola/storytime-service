/*
 * Created on 16 Mar 2017 ( Time 18:41:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.kumasi.storytime.model.Requirement;
import net.kumasi.storytime.model.jpa.RequirementEntity;
import java.util.Date;
import java.util.List;
import net.kumasi.storytime.business.service.RequirementService;
import net.kumasi.storytime.business.service.mapping.RequirementServiceMapper;
import net.kumasi.storytime.persistence.PersistenceServiceProvider;
import net.kumasi.storytime.persistence.services.RequirementPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of RequirementService
 */
@Component
public class RequirementServiceImpl implements RequirementService {

	private RequirementPersistence requirementPersistence;

	@Resource
	private RequirementServiceMapper requirementServiceMapper;
	
	public RequirementServiceImpl() {
		requirementPersistence = PersistenceServiceProvider.getService(RequirementPersistence.class);
	}
		
	@Override
	public Requirement findById(Integer idrequirement) {
		RequirementEntity entity = requirementPersistence.load(idrequirement);
		return requirementServiceMapper.mapRequirementEntityToRequirement(entity);
	}

	@Override
	public List<Requirement> findAll() {
		List<RequirementEntity> entities = requirementPersistence.loadAll();
		List<Requirement> beans = new ArrayList<Requirement>();
		for(RequirementEntity entity : entities) {
			beans.add(requirementServiceMapper.mapRequirementEntityToRequirement(entity));
		}
		return beans;
	}

	@Override
	public Requirement save(Requirement requirement) {
		return update(requirement) ;
	}

	@Override
	public Requirement create(Requirement requirement) {
		if(requirement.getIdrequirement() != null && requirementPersistence.load(requirement.getIdrequirement()) != null) {
			throw new IllegalStateException("already.exists");
		}
		RequirementEntity requirementEntity = new RequirementEntity();
		requirementServiceMapper.mapRequirementToRequirementEntity(requirement, requirementEntity);
		RequirementEntity requirementEntitySaved = requirementPersistence.save(requirementEntity);
		return requirementServiceMapper.mapRequirementEntityToRequirement(requirementEntitySaved);
	}

	@Override
	public Requirement update(Requirement requirement) {
		RequirementEntity requirementEntity = requirementPersistence.load(requirement.getIdrequirement());
		requirementServiceMapper.mapRequirementToRequirementEntity(requirement, requirementEntity);
		RequirementEntity requirementEntitySaved = requirementPersistence.save(requirementEntity);
		return requirementServiceMapper.mapRequirementEntityToRequirement(requirementEntitySaved);
	}

	@Override
	public void delete(Integer idrequirement) {
		requirementPersistence.delete(idrequirement);
	}

	public RequirementPersistence getRequirementPersistence() {
		return requirementPersistence;
	}

	public void setRequirementPersistence(RequirementPersistence requirementPersistence) {
		this.requirementPersistence = requirementPersistence;
	}

	public RequirementServiceMapper getRequirementServiceMapper() {
		return requirementServiceMapper;
	}

	public void setRequirementServiceMapper(RequirementServiceMapper requirementServiceMapper) {
		this.requirementServiceMapper = requirementServiceMapper;
	}

}
