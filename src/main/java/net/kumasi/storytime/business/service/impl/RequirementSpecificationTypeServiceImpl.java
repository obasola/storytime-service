/*
 * Created on 16 Mar 2017 ( Time 18:41:46 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.kumasi.storytime.model.RequirementSpecificationType;
import net.kumasi.storytime.model.jpa.RequirementSpecificationTypeEntity;
import net.kumasi.storytime.model.jpa.RequirementSpecificationTypeEntityKey;
import net.kumasi.storytime.business.service.RequirementSpecificationTypeService;
import net.kumasi.storytime.business.service.mapping.RequirementSpecificationTypeServiceMapper;
import net.kumasi.storytime.persistence.PersistenceServiceProvider;
import net.kumasi.storytime.persistence.services.RequirementSpecificationTypePersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of RequirementSpecificationTypeService
 */
@Component
public class RequirementSpecificationTypeServiceImpl implements RequirementSpecificationTypeService {

	private RequirementSpecificationTypePersistence requirementSpecificationTypePersistence;

	@Resource
	private RequirementSpecificationTypeServiceMapper requirementSpecificationTypeServiceMapper;
	
	public RequirementSpecificationTypeServiceImpl() {
		requirementSpecificationTypePersistence = PersistenceServiceProvider.getService(RequirementSpecificationTypePersistence.class);
	}
		
	@Override
	public RequirementSpecificationType findById(Integer requirementIdrequirement, Integer specificationTypeIdrequirementType) {
		RequirementSpecificationTypeEntity entity = requirementSpecificationTypePersistence.load(requirementIdrequirement, specificationTypeIdrequirementType);
		return requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(entity);
	}

	@Override
	public List<RequirementSpecificationType> findAll() {
		List<RequirementSpecificationTypeEntity> entities = requirementSpecificationTypePersistence.loadAll();
		List<RequirementSpecificationType> beans = new ArrayList<RequirementSpecificationType>();
		for(RequirementSpecificationTypeEntity entity : entities) {
			beans.add(requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(entity));
		}
		return beans;
	}

	@Override
	public RequirementSpecificationType save(RequirementSpecificationType requirementSpecificationType) {
		return update(requirementSpecificationType) ;
	}

	@Override
	public RequirementSpecificationType create(RequirementSpecificationType requirementSpecificationType) {
		if(requirementSpecificationTypePersistence.load(requirementSpecificationType.getRequirementIdrequirement(), requirementSpecificationType.getSpecificationTypeIdrequirementType()) != null) {
			throw new IllegalStateException("already.exists");
		}
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntity = new RequirementSpecificationTypeEntity();
		requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeToRequirementSpecificationTypeEntity(requirementSpecificationType, requirementSpecificationTypeEntity);
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntitySaved = requirementSpecificationTypePersistence.save(requirementSpecificationTypeEntity);
		return requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(requirementSpecificationTypeEntitySaved);
	}

	@Override
	public RequirementSpecificationType update(RequirementSpecificationType requirementSpecificationType) {
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntity = requirementSpecificationTypePersistence.load(requirementSpecificationType.getRequirementIdrequirement(), requirementSpecificationType.getSpecificationTypeIdrequirementType());
		requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeToRequirementSpecificationTypeEntity(requirementSpecificationType, requirementSpecificationTypeEntity);
		RequirementSpecificationTypeEntity requirementSpecificationTypeEntitySaved = requirementSpecificationTypePersistence.save(requirementSpecificationTypeEntity);
		return requirementSpecificationTypeServiceMapper.mapRequirementSpecificationTypeEntityToRequirementSpecificationType(requirementSpecificationTypeEntitySaved);
	}

	@Override
	public void delete(Integer requirementIdrequirement, Integer specificationTypeIdrequirementType) {
		requirementSpecificationTypePersistence.delete(requirementIdrequirement, specificationTypeIdrequirementType);
	}

	public RequirementSpecificationTypePersistence getRequirementSpecificationTypePersistence() {
		return requirementSpecificationTypePersistence;
	}

	public void setRequirementSpecificationTypePersistence(RequirementSpecificationTypePersistence requirementSpecificationTypePersistence) {
		this.requirementSpecificationTypePersistence = requirementSpecificationTypePersistence;
	}

	public RequirementSpecificationTypeServiceMapper getRequirementSpecificationTypeServiceMapper() {
		return requirementSpecificationTypeServiceMapper;
	}

	public void setRequirementSpecificationTypeServiceMapper(RequirementSpecificationTypeServiceMapper requirementSpecificationTypeServiceMapper) {
		this.requirementSpecificationTypeServiceMapper = requirementSpecificationTypeServiceMapper;
	}

}
