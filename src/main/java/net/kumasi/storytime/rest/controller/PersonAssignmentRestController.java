/*
 * Created on 16 Mar 2017 ( Time 18:41:55 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import net.kumasi.storytime.model.PersonAssignment;
import net.kumasi.storytime.business.service.PersonAssignmentService;
import net.kumasi.storytime.web.listitem.PersonAssignmentListItem;

/**
 * Spring MVC controller for 'PersonAssignment' management.
 */
@Controller
public class PersonAssignmentRestController {

	@Resource
	private PersonAssignmentService personAssignmentService;
	
	@RequestMapping( value="/items/personAssignment",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<PersonAssignmentListItem> findAllAsListItems() {
		List<PersonAssignment> list = personAssignmentService.findAll();
		List<PersonAssignmentListItem> items = new LinkedList<PersonAssignmentListItem>();
		for ( PersonAssignment personAssignment : list ) {
			items.add(new PersonAssignmentListItem( personAssignment ) );
		}
		return items;
	}
	
	@RequestMapping( value="/personAssignment",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<PersonAssignment> findAll() {
		return personAssignmentService.findAll();
	}

	@RequestMapping( value="/personAssignment/{personIdperson}/{requirementIdrequirement}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public PersonAssignment findOne(@PathVariable("personIdperson") Integer personIdperson, @PathVariable("requirementIdrequirement") Integer requirementIdrequirement) {
		return personAssignmentService.findById(personIdperson, requirementIdrequirement);
	}
	
	@RequestMapping( value="/personAssignment",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public PersonAssignment create(@RequestBody PersonAssignment personAssignment) {
		return personAssignmentService.create(personAssignment);
	}

	@RequestMapping( value="/personAssignment/{personIdperson}/{requirementIdrequirement}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public PersonAssignment update(@PathVariable("personIdperson") Integer personIdperson, @PathVariable("requirementIdrequirement") Integer requirementIdrequirement, @RequestBody PersonAssignment personAssignment) {
		return personAssignmentService.update(personAssignment);
	}

	@RequestMapping( value="/personAssignment/{personIdperson}/{requirementIdrequirement}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("personIdperson") Integer personIdperson, @PathVariable("requirementIdrequirement") Integer requirementIdrequirement) {
		personAssignmentService.delete(personIdperson, requirementIdrequirement);
	}
	
}
