/*
 * Created on 16 Mar 2017 ( Time 18:41:56 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package net.kumasi.storytime.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import net.kumasi.storytime.model.SpecificationType;
import net.kumasi.storytime.business.service.SpecificationTypeService;
import net.kumasi.storytime.web.listitem.SpecificationTypeListItem;

/**
 * Spring MVC controller for 'SpecificationType' management.
 */
@Controller
public class SpecificationTypeRestController {

	@Resource
	private SpecificationTypeService specificationTypeService;
	
	@RequestMapping( value="/items/specificationType",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<SpecificationTypeListItem> findAllAsListItems() {
		List<SpecificationType> list = specificationTypeService.findAll();
		List<SpecificationTypeListItem> items = new LinkedList<SpecificationTypeListItem>();
		for ( SpecificationType specificationType : list ) {
			items.add(new SpecificationTypeListItem( specificationType ) );
		}
		return items;
	}
	
	@RequestMapping( value="/specificationType",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<SpecificationType> findAll() {
		return specificationTypeService.findAll();
	}

	@RequestMapping( value="/specificationType/{idrequirementType}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public SpecificationType findOne(@PathVariable("idrequirementType") Integer idrequirementType) {
		return specificationTypeService.findById(idrequirementType);
	}
	
	@RequestMapping( value="/specificationType",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public SpecificationType create(@RequestBody SpecificationType specificationType) {
		return specificationTypeService.create(specificationType);
	}

	@RequestMapping( value="/specificationType/{idrequirementType}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public SpecificationType update(@PathVariable("idrequirementType") Integer idrequirementType, @RequestBody SpecificationType specificationType) {
		return specificationTypeService.update(specificationType);
	}

	@RequestMapping( value="/specificationType/{idrequirementType}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("idrequirementType") Integer idrequirementType) {
		specificationTypeService.delete(idrequirementType);
	}
	
}
