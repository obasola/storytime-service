/*
 * Created on 16 Mar 2017 ( Time 18:41:34 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a composite Primary Key  


package net.kumasi.storytime.model.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;


import javax.persistence.*;

/**
 * Persistent class for entity stored in table "person_assignment"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="person_assignment", catalog="storytime" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="PersonAssignmentEntity.countAll", query="SELECT COUNT(x) FROM PersonAssignmentEntity x" )
} )
public class PersonAssignmentEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private PersonAssignmentEntityKey compositePrimaryKey ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="status")
    private Integer    status       ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="Person_idPerson", referencedColumnName="idPerson", insertable=false, updatable=false)
    private PersonEntity person      ;

    @ManyToOne
    @JoinColumn(name="Requirement_idRequirement", referencedColumnName="idRequirement", insertable=false, updatable=false)
    private RequirementEntity requirement ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public PersonAssignmentEntity() {
		super();
		this.compositePrimaryKey = new PersonAssignmentEntityKey();       
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
    public void setPersonIdperson( Integer personIdperson ) {
        this.compositePrimaryKey.setPersonIdperson( personIdperson ) ;
    }
    public Integer getPersonIdperson() {
        return this.compositePrimaryKey.getPersonIdperson() ;
    }
    public void setRequirementIdrequirement( Integer requirementIdrequirement ) {
        this.compositePrimaryKey.setRequirementIdrequirement( requirementIdrequirement ) ;
    }
    public Integer getRequirementIdrequirement() {
        return this.compositePrimaryKey.getRequirementIdrequirement() ;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : status ( INT ) 
    public void setStatus( Integer status ) {
        this.status = status;
    }
    public Integer getStatus() {
        return this.status;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setPerson( PersonEntity person ) {
        this.person = person;
    }
    public PersonEntity getPerson() {
        return this.person;
    }

    public void setRequirement( RequirementEntity requirement ) {
        this.requirement = requirement;
    }
    public RequirementEntity getRequirement() {
        return this.requirement;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        if ( compositePrimaryKey != null ) {  
            sb.append(compositePrimaryKey.toString());  
        }  
        else {  
            sb.append( "(null-key)" ); 
        }  
        sb.append("]:"); 
        sb.append(status);
        return sb.toString(); 
    } 

}
